version: 2.1

orbs:
  node: circleci/node@5.0.3
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3.1
  aws-cli: circleci/aws-cli@3.1.3

jobs:
  deploy-cfn:
    parameters:
      stack-name-1:
        description: Name of the CloudFormation stack
        type: string
      stack-name-2:
        description: Name of the CloudFormation stack
        type: string
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Deploy Cloudformation Template with new Docker image
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
            --template-file eksctl/eksctl.yml \
            --stack-name << parameters.stack-name-1 >> \
            --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"
      - run:
          name: Deploy EKS
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
            --template-file infras/eks-node.yml \
            --stack-name << parameters.stack-name-2 >> \
            --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"
  lint-frontend:
    docker:
      - image: cimg/node:14.20.1
    steps:
      - checkout
      - run:
          name: Check lint code
          command: |
            cd angular-app
            npm install
            npm run test

  build-frontend:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build front-end
          command: |
            cd angular-app
            docker build -t fury/angular-app .
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            docker login -u "$USERNAME" -p "$PASSWORD"
            docker push fury/angular-app:latest

  deploy-frontend:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - run:
          name: Install envsubst
          command: |
            curl -L https://github.com/a8m/envsubst/releases/download/v1.2.0/envsubst-`uname -s`-`uname -m` -o envsubst
            chmod +x envsubst
            sudo mv envsubst /usr/local/bin
      - run:
          name: Replace variable
          command: |
            envsubst < eksctl/spa-deployment.yml > eksctl/spa-deployment.yml.temp && cp -f eksctl/spa-deployment.yml.temp eksctl/spa-deployment.yml
            envsubst < eksctl/spa-service.yml > eksctl/spa-service.yml.temp && cp -f eksctl/spa-service.yml.temp eksctl/spa-service.yml
            echo "##################################"
            cat eksctl/spa-deployment.yml
            echo "##################################"
            cat eksctl/spa-service.yml
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: "eksctl/spa-deployment.yml"
          resource-name: deployment/angular-app
          namespace: default
      - kubernetes/update-container-image:
          get-rollout-status: true
          container-image-updates: "angular-app=fury/angular-app:latest"
          resource-name: deployment/angular-app
          namespace: default
      - run:
          name: Restart image
          command: |
            kubectl get service > service.txt    
      - run:
          name: Restart image
          command: |
            kubectl rollout restart deployment/angular-app

workflows:
  capstone:
    jobs:
      - deploy-cfn:
          stack-name-1: Udafury-EKS
          stack-name-2: Udafury-EKS-Node
      - lint-frontend
      - build-frontend:
          requires:
            - lint-frontend
      - deploy-frontend:
          cluster-name: "furycity"
          requires:
            - build-frontend
            - deploy-cfn